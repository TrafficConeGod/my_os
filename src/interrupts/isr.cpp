#include "system.h"
#include "basic.h"
#include "array.h"
#include "function.h"
#include "exception.h"

#define MAKE_ISR(id) extern "C" void _isr##id();
#define SET_GATE(id) idt::set_gate(id, (unsigned)_isr##id, 0x08, 0x8E);

MAKE_ISR(0)
MAKE_ISR(1)
MAKE_ISR(2)
MAKE_ISR(3)
MAKE_ISR(4)
MAKE_ISR(5)
MAKE_ISR(6)
MAKE_ISR(7)
MAKE_ISR(8)
MAKE_ISR(9)
MAKE_ISR(10)
MAKE_ISR(11)
MAKE_ISR(12)
MAKE_ISR(13)
MAKE_ISR(14)
MAKE_ISR(15)
MAKE_ISR(16)
MAKE_ISR(17)
MAKE_ISR(18)
MAKE_ISR(19)
MAKE_ISR(20)
MAKE_ISR(21)
MAKE_ISR(22)
MAKE_ISR(23)
MAKE_ISR(24)
MAKE_ISR(25)
MAKE_ISR(26)
MAKE_ISR(27)
MAKE_ISR(28)
MAKE_ISR(29)
MAKE_ISR(30)
MAKE_ISR(31)
MAKE_ISR(32)
MAKE_ISR(33)
MAKE_ISR(34)
MAKE_ISR(35)
MAKE_ISR(36)
MAKE_ISR(37)
MAKE_ISR(38)
MAKE_ISR(39)
MAKE_ISR(40)
MAKE_ISR(41)
MAKE_ISR(42)
MAKE_ISR(43)
MAKE_ISR(44)
MAKE_ISR(45)
MAKE_ISR(46)
MAKE_ISR(47)
MAKE_ISR(48)
MAKE_ISR(49)
MAKE_ISR(50)
MAKE_ISR(51)
MAKE_ISR(52)
MAKE_ISR(53)
MAKE_ISR(54)
MAKE_ISR(55)
MAKE_ISR(56)
MAKE_ISR(57)
MAKE_ISR(58)
MAKE_ISR(59)
MAKE_ISR(60)
MAKE_ISR(61)
MAKE_ISR(62)
MAKE_ISR(63)
MAKE_ISR(64)
MAKE_ISR(65)
MAKE_ISR(66)
MAKE_ISR(67)
MAKE_ISR(68)
MAKE_ISR(69)
MAKE_ISR(70)
MAKE_ISR(71)
MAKE_ISR(72)
MAKE_ISR(73)
MAKE_ISR(74)
MAKE_ISR(75)
MAKE_ISR(76)
MAKE_ISR(77)
MAKE_ISR(78)
MAKE_ISR(79)
MAKE_ISR(80)
MAKE_ISR(81)
MAKE_ISR(82)
MAKE_ISR(83)
MAKE_ISR(84)
MAKE_ISR(85)
MAKE_ISR(86)
MAKE_ISR(87)
MAKE_ISR(88)
MAKE_ISR(89)
MAKE_ISR(90)
MAKE_ISR(91)
MAKE_ISR(92)
MAKE_ISR(93)
MAKE_ISR(94)
MAKE_ISR(95)
MAKE_ISR(96)
MAKE_ISR(97)
MAKE_ISR(98)
MAKE_ISR(99)
MAKE_ISR(100)
MAKE_ISR(101)
MAKE_ISR(102)
MAKE_ISR(103)
MAKE_ISR(104)
MAKE_ISR(105)
MAKE_ISR(106)
MAKE_ISR(107)
MAKE_ISR(108)
MAKE_ISR(109)
MAKE_ISR(110)
MAKE_ISR(111)
MAKE_ISR(112)
MAKE_ISR(113)
MAKE_ISR(114)
MAKE_ISR(115)
MAKE_ISR(116)
MAKE_ISR(117)
MAKE_ISR(118)
MAKE_ISR(119)
MAKE_ISR(120)
MAKE_ISR(121)
MAKE_ISR(122)
MAKE_ISR(123)
MAKE_ISR(124)
MAKE_ISR(125)
MAKE_ISR(126)
MAKE_ISR(127)
MAKE_ISR(128)
MAKE_ISR(129)
MAKE_ISR(130)
MAKE_ISR(131)
MAKE_ISR(132)
MAKE_ISR(133)
MAKE_ISR(134)
MAKE_ISR(135)
MAKE_ISR(136)
MAKE_ISR(137)
MAKE_ISR(138)
MAKE_ISR(139)
MAKE_ISR(140)
MAKE_ISR(141)
MAKE_ISR(142)
MAKE_ISR(143)
MAKE_ISR(144)
MAKE_ISR(145)
MAKE_ISR(146)
MAKE_ISR(147)
MAKE_ISR(148)
MAKE_ISR(149)
MAKE_ISR(150)
MAKE_ISR(151)
MAKE_ISR(152)
MAKE_ISR(153)
MAKE_ISR(154)
MAKE_ISR(155)
MAKE_ISR(156)
MAKE_ISR(157)
MAKE_ISR(158)
MAKE_ISR(159)
MAKE_ISR(160)
MAKE_ISR(161)
MAKE_ISR(162)
MAKE_ISR(163)
MAKE_ISR(164)
MAKE_ISR(165)
MAKE_ISR(166)
MAKE_ISR(167)
MAKE_ISR(168)
MAKE_ISR(169)
MAKE_ISR(170)
MAKE_ISR(171)
MAKE_ISR(172)
MAKE_ISR(173)
MAKE_ISR(174)
MAKE_ISR(175)
MAKE_ISR(176)
MAKE_ISR(177)
MAKE_ISR(178)
MAKE_ISR(179)
MAKE_ISR(180)
MAKE_ISR(181)
MAKE_ISR(182)
MAKE_ISR(183)
MAKE_ISR(184)
MAKE_ISR(185)
MAKE_ISR(186)
MAKE_ISR(187)
MAKE_ISR(188)
MAKE_ISR(189)
MAKE_ISR(190)
MAKE_ISR(191)
MAKE_ISR(192)
MAKE_ISR(193)
MAKE_ISR(194)
MAKE_ISR(195)
MAKE_ISR(196)
MAKE_ISR(197)
MAKE_ISR(198)
MAKE_ISR(199)
MAKE_ISR(200)
MAKE_ISR(201)
MAKE_ISR(202)
MAKE_ISR(203)
MAKE_ISR(204)
MAKE_ISR(205)
MAKE_ISR(206)
MAKE_ISR(207)
MAKE_ISR(208)
MAKE_ISR(209)
MAKE_ISR(210)
MAKE_ISR(211)
MAKE_ISR(212)
MAKE_ISR(213)
MAKE_ISR(214)
MAKE_ISR(215)
MAKE_ISR(216)
MAKE_ISR(217)
MAKE_ISR(218)
MAKE_ISR(219)
MAKE_ISR(220)
MAKE_ISR(221)
MAKE_ISR(222)
MAKE_ISR(223)
MAKE_ISR(224)
MAKE_ISR(225)
MAKE_ISR(226)
MAKE_ISR(227)
MAKE_ISR(228)
MAKE_ISR(229)
MAKE_ISR(230)
MAKE_ISR(231)
MAKE_ISR(232)
MAKE_ISR(233)
MAKE_ISR(234)
MAKE_ISR(235)
MAKE_ISR(236)
MAKE_ISR(237)
MAKE_ISR(238)
MAKE_ISR(239)
MAKE_ISR(240)
MAKE_ISR(241)
MAKE_ISR(242)
MAKE_ISR(243)
MAKE_ISR(244)
MAKE_ISR(245)
MAKE_ISR(246)
MAKE_ISR(247)
MAKE_ISR(248)
MAKE_ISR(249)
MAKE_ISR(250)
MAKE_ISR(251)
MAKE_ISR(252)
MAKE_ISR(253)
MAKE_ISR(254)
MAKE_ISR(255)

namespace isr {
    array<function<void(const registers&)>, 256> handlers;

    void remap() {
        port::put_byte(0x20, 0x11);
        port::put_byte(0xA0, 0x11);
        port::put_byte(0x21, 0x20);
        port::put_byte(0xA1, 0x28);
        port::put_byte(0x21, 0x04);
        port::put_byte(0xA1, 0x02);
        port::put_byte(0x21, 0x01);
        port::put_byte(0xA1, 0x01);
        port::put_byte(0x21, 0x0);
        port::put_byte(0xA1, 0x0);
    }

    void main() {
        SET_GATE(0)
        SET_GATE(1)
        SET_GATE(2)
        SET_GATE(3)
        SET_GATE(4)
        SET_GATE(5)
        SET_GATE(6)
        SET_GATE(7)
        SET_GATE(8)
        SET_GATE(9)
        SET_GATE(10)
        SET_GATE(11)
        SET_GATE(12)
        SET_GATE(13)
        SET_GATE(14)
        SET_GATE(15)
        SET_GATE(16)
        SET_GATE(17)
        SET_GATE(18)
        SET_GATE(19)
        SET_GATE(20)
        SET_GATE(21)
        SET_GATE(22)
        SET_GATE(23)
        SET_GATE(24)
        SET_GATE(25)
        SET_GATE(26)
        SET_GATE(27)
        SET_GATE(28)
        SET_GATE(29)
        SET_GATE(30)
        SET_GATE(31)
        remap();
        SET_GATE(32)
        SET_GATE(33)
        SET_GATE(34)
        SET_GATE(35)
        SET_GATE(36)
        SET_GATE(37)
        SET_GATE(38)
        SET_GATE(39)
        SET_GATE(40)
        SET_GATE(41)
        SET_GATE(42)
        SET_GATE(43)
        SET_GATE(44)
        SET_GATE(45)
        SET_GATE(46)
        SET_GATE(47)
        // SET_GATE(48)
        // SET_GATE(49)
        // SET_GATE(50)
        // SET_GATE(51)
        // SET_GATE(52)
        // SET_GATE(53)
        // SET_GATE(54)
        // SET_GATE(55)
        // SET_GATE(56)
        // SET_GATE(57)
        // SET_GATE(58)
        // SET_GATE(59)
        // SET_GATE(60)
        // SET_GATE(61)
        // SET_GATE(62)
        // SET_GATE(63)
        // SET_GATE(64)
        // SET_GATE(65)
        // SET_GATE(66)
        // SET_GATE(67)
        // SET_GATE(68)
        // SET_GATE(69)
        // SET_GATE(70)
        // SET_GATE(71)
        // SET_GATE(72)
        // SET_GATE(73)
        // SET_GATE(74)
        // SET_GATE(75)
        // SET_GATE(76)
        // SET_GATE(77)
        // SET_GATE(78)
        // SET_GATE(79)
        // SET_GATE(80)
        // SET_GATE(81)
        // SET_GATE(82)
        // SET_GATE(83)
        // SET_GATE(84)
        // SET_GATE(85)
        // SET_GATE(86)
        // SET_GATE(87)
        // SET_GATE(88)
        // SET_GATE(89)
        // SET_GATE(90)
        // SET_GATE(91)
        // SET_GATE(92)
        // SET_GATE(93)
        // SET_GATE(94)
        // SET_GATE(95)
        // SET_GATE(96)
        // SET_GATE(97)
        // SET_GATE(98)
        // SET_GATE(99)
        // SET_GATE(100)
        // SET_GATE(101)
        // SET_GATE(102)
        // SET_GATE(103)
        // SET_GATE(104)
        // SET_GATE(105)
        // SET_GATE(106)
        // SET_GATE(107)
        // SET_GATE(108)
        // SET_GATE(109)
        // SET_GATE(110)
        // SET_GATE(111)
        // SET_GATE(112)
        // SET_GATE(113)
        // SET_GATE(114)
        // SET_GATE(115)
        // SET_GATE(116)
        // SET_GATE(117)
        // SET_GATE(118)
        // SET_GATE(119)
        // SET_GATE(120)
        // SET_GATE(121)
        // SET_GATE(122)
        // SET_GATE(123)
        // SET_GATE(124)
        // SET_GATE(125)
        // SET_GATE(126)
        // SET_GATE(127)
        // SET_GATE(128)
        // SET_GATE(129)
        // SET_GATE(130)
        // SET_GATE(131)
        // SET_GATE(132)
        // SET_GATE(133)
        // SET_GATE(134)
        // SET_GATE(135)
        // SET_GATE(136)
        // SET_GATE(137)
        // SET_GATE(138)
        // SET_GATE(139)
        // SET_GATE(140)
        // SET_GATE(141)
        // SET_GATE(142)
        // SET_GATE(143)
        // SET_GATE(144)
        // SET_GATE(145)
        // SET_GATE(146)
        // SET_GATE(147)
        // SET_GATE(148)
        // SET_GATE(149)
        // SET_GATE(150)
        // SET_GATE(151)
        // SET_GATE(152)
        // SET_GATE(153)
        // SET_GATE(154)
        // SET_GATE(155)
        // SET_GATE(156)
        // SET_GATE(157)
        // SET_GATE(158)
        // SET_GATE(159)
        // SET_GATE(160)
        // SET_GATE(161)
        // SET_GATE(162)
        // SET_GATE(163)
        // SET_GATE(164)
        // SET_GATE(165)
        // SET_GATE(166)
        // SET_GATE(167)
        // SET_GATE(168)
        // SET_GATE(169)
        // SET_GATE(170)
        // SET_GATE(171)
        // SET_GATE(172)
        // SET_GATE(173)
        // SET_GATE(174)
        // SET_GATE(175)
        // SET_GATE(176)
        // SET_GATE(177)
        // SET_GATE(178)
        // SET_GATE(179)
        // SET_GATE(180)
        // SET_GATE(181)
        // SET_GATE(182)
        // SET_GATE(183)
        // SET_GATE(184)
        // SET_GATE(185)
        // SET_GATE(186)
        // SET_GATE(187)
        // SET_GATE(188)
        // SET_GATE(189)
        // SET_GATE(190)
        // SET_GATE(191)
        // SET_GATE(192)
        // SET_GATE(193)
        // SET_GATE(194)
        // SET_GATE(195)
        // SET_GATE(196)
        // SET_GATE(197)
        // SET_GATE(198)
        // SET_GATE(199)
        // SET_GATE(200)
        // SET_GATE(201)
        // SET_GATE(202)
        // SET_GATE(203)
        // SET_GATE(204)
        // SET_GATE(205)
        // SET_GATE(206)
        // SET_GATE(207)
        // SET_GATE(208)
        // SET_GATE(209)
        // SET_GATE(210)
        // SET_GATE(211)
        // SET_GATE(212)
        // SET_GATE(213)
        // SET_GATE(214)
        // SET_GATE(215)
        // SET_GATE(216)
        // SET_GATE(217)
        // SET_GATE(218)
        // SET_GATE(219)
        // SET_GATE(220)
        // SET_GATE(221)
        // SET_GATE(222)
        // SET_GATE(223)
        // SET_GATE(224)
        // SET_GATE(225)
        // SET_GATE(226)
        // SET_GATE(227)
        // SET_GATE(228)
        // SET_GATE(229)
        // SET_GATE(230)
        // SET_GATE(231)
        // SET_GATE(232)
        // SET_GATE(233)
        // SET_GATE(234)
        // SET_GATE(235)
        // SET_GATE(236)
        // SET_GATE(237)
        // SET_GATE(238)
        // SET_GATE(239)
        // SET_GATE(240)
        // SET_GATE(241)
        // SET_GATE(242)
        // SET_GATE(243)
        // SET_GATE(244)
        // SET_GATE(245)
        // SET_GATE(246)
        // SET_GATE(247)
        // SET_GATE(248)
        // SET_GATE(249)
        // SET_GATE(250)
        // SET_GATE(251)
        // SET_GATE(252)
        // SET_GATE(253)
        // SET_GATE(254)
        // SET_GATE(255)
        for (auto& function : handlers) {
            function = nullptr;
        }
    }

    void set_handler(uint32_t interrupt_id, function<void(const registers&)> handler) {
        handlers[interrupt_id] = handler;
    }

    void remove_handler(uint32_t interrupt_id) {
        handlers[interrupt_id] = nullptr;
    }

    array<const char*, 33> exception_messages = {
        "Division By Zero",
        "Debug",
        "Non Maskable Interrupt",
        "Breakpoint",
        "Into Detected Overflow",
        "Out of Bounds",
        "Invalid Opcode",
        "No Corprocessor",
        "Double Fault",
        "Coprocessor Segment Overrun",
        "Bad TSS",
        "Segment Not Present",
        "Stack Fault Exception",
        "General Protection Fault",
        "Page Fault",
        "Unknown Interrupt",
        "Coprocessor Fault",
        "Alignment Check",
        "Machine Check",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
        "Reserved",
    };
}

using namespace isr;
extern "C" void isr_handler(const registers& regs) {
    function<void(const registers&)> handler = handlers[regs.int_no];
    if (handler) {
        handler(regs);
    } else if (regs.int_no < 32) {
        puts(exception_messages[regs.int_no]);
        for (;;);
    }
    
    if (regs.int_no >= 32 && regs.int_no < 48) {
        if (regs.int_no >= 40) {
            port::put_byte(0xA0, 0x20);
        }

        port::put_byte(0x20, 0x20);
    }
}